in my pega project this are my first two requirements

First Requirement:
As a claim adjuster
I should be able to enter claim details for a claimant
So that the Claim Information get stored for review and further processing 

Acceptance Criteria for first requirement:
1.	Adjuster logs in the application 
2.	Adjuster clicks on ‘Create Claim’
3.	Adjuster fills in the below mandatory fields –
a.	Claimant Name (Text Field)
b.	Policy Number (Dropdown to display existing policy numbers)
c.	Date of Birth (Calendar 1900-2020 – should be an old date)
d.	Date of Loss (Calendar 1900-2022 – should be an old date)
e.	Loss Description (Paragraph, 1000-character, Free Text)
f.	Account Line (Dropdown – values being -> Indemnity, Medical, Legal)
g.	Supporting Document (Attachment)
4.	Adjuster can preview the details
5.	Adjuster has an optional paragraph field to add her comments regarding the chosen action
6.	Adjuster can save the information using ‘Save as draft’ button for future updates, and see below message – ‘Claim # xxxxxx has been saved as draft successfully’
7.	Adjuster can click on ‘Submit claim’ to create the claim 
8.	Upon clicking on Submit claim button, success message should be displayed – ‘Claim # xxxxxx has been created successfully’
9.	The status of the claim should be updated as ‘Open-Draft’ for draft claim, or ‘Open-New’ for submitted claim


High Level Implementation for first requirement:
1. Create operator Id's for the Claim Adjuster.
2. Associate a portal to their operator Ids.
3. Create a portal rule to define the Claim Adjuster dashboard.
4. For reference ,we can consider case worker portal.
6.  Create a case type to  submit Claim  Reuest . The case type would  have the stage 'Submission' where the Claim Adjuster can submit the Claim Request.
The current logic will be incorporated as a part of 'Enter Claim Details' step under stage  'Submission' .
7. Buid a section to display the field .
8 . Include the button ‘Save as draft’ and
'Submit claim’ . Include Action event set for the button.
9. Set the confirmation note in assignment. 
10. Set the case status.



Second Requirement:
As a claim adjuster
I should be able to review & update an existing claim
So that the Claim Information get updated correctly for further processing 


Acceptance Criteria for second:
1.	Adjuster logs in the application 
2.	Adjuster clicks on any existing draft or open claim from the Home Dashboard 
3.	Dashboard will display below 3 details –
a.	My draft claims (Will display the draft claims once saved as draft)
b.	My open claims (will display the open submitted claims)
c.	My close claims (will display the closed claims)
4.	Adjuster reviews & updates in the below prepopulated fields as required –
a.	Claimant Name (Text Field)
b.	Policy Number (Dropdown to display existing policy numbers)
c.	Date of Birth (Calendar 1900-2020 – should be an old date)
d.	Date of Loss (Calendar 1900-2022 – should be an old date)
e.	Loss Description (Paragraph, 1000-character, Free Text)
f.	Account Line (Dropdown – values being -> Indemnity, Medical, Legal)
g.	Supporting Document (Attachment)
5.	Adjuster can preview the details
6.	Adjuster has an optional paragraph field to add her comments regarding the chosen action
7.	Adjuster can click on ‘Submit claim’ to create the claim (for draft or open)
8.	Upon clicking on Submit claim button, success message should be displayed – ‘Claim # xxxxxx has been updated successfully’
9.	The status of the claim should be updated as ‘Open-Draft’ for draft claim, or ‘Open-New’ for submitted claim


High level implementation for second:
1. Provide links for each options.                                                                                                                                                      
2. Create new Harness for each option. Creatae a navigation rule for Menu and call the Harness or Create a page for each option and Include the page in potal by selecting "Add Item " ->Custom pages.
3.My draft claims - Create a Report Definition . It will fetch cases in status ‘Open-Draft’ and also the consider the  currently logged in Operator ID  . Build a section to display the field in tabular format .
4. My Open claims - Create a Report Definition . It will fetch cases in status 'Open-New’ and also the consider the  currently logged in Operator  ID. Build a section to display the field in tabular format .
5. My Close claims - Create a Report Definition . It will fetch cases in status ‘Resolved-Closed’and also the consider the  currently logged in  operator  ID. Build a section to display the field in tabular format .
6. The current logic will be incorporated as a part of 'Update Claim Details' step under stage  'Submission' .
7. Buid a section to display the field .
8 . Include the button ‘Save as draft’ and
'Submit claim'.
9. Set the confimation Note .


I want you to provide me most simplest approach to achieve this with all detailed  complete steps as i don't know pega and also provide the case workflow and life cycle 





1. Claim Update: Enter Claim Details
Objective: Allow claim adjusters to enter claim details for a claimant.

Steps:

Adjuster logs in.
Clicks on 'Create Claim'.
Fills in mandatory fields (Claimant Name, Policy Number, Date of Birth, Date of Loss, Loss Description, Account Line, Supporting Document).
Preview details.
Optionally add comments.
Save as draft or submit the claim.
Display success messages and update claim status.
Implementation:

Create operator IDs and associate a portal for Claim Adjusters.
Define the Claim Adjuster dashboard.
Create a case type for submitting claims with a 'Submission' stage.
Build sections for fields and buttons ('Save as draft', 'Submit claim').
Use Pega's out-of-the-box section for attachments.
Set confirmation notes and case status.
2. Claim Update: Update Claim Details
Objective: Allow claim adjusters to review and update existing claims.

Steps:

Adjuster logs in.
Clicks on an existing draft or open claim.
Dashboard displays draft, open, and closed claims.
Reviews and updates prepopulated fields.
Preview details.
Optionally add comments.
Submit the claim.
Display success messages and update claim status.
Implementation:

Provide links and create new harnesses for each option.
Create report definitions for draft, open, and closed claims.
Build sections for fields and buttons ('Save as draft', 'Submit claim').
Set confirmation notes and case status.
3. Reserve Processing: Enter Claim Reserve
Objective: Allow claim adjusters to add reserve amounts for existing claims.

Steps:

Adjuster logs in.
Clicks on an open claim.
Reviews prepopulated fields.
Clicks 'Create reserve' and enters the amount.
Reenters the amount for confirmation.
Displays validation messages for mismatches.
Optionally add comments.
Submit the reserve.
Display success messages and update claim status.
Send email notifications.
Implementation:

Incorporate logic in the 'Enter Claim Reserve' step under 'Reserve Processing'.
Build sections for fields and buttons ('Create reserve', 'Submit reserve').
Use data transforms and when rules for validation.
Develop correspondence rules for email notifications.
Set case status.
4. Reserve Processing: Approve/Reject Claim Reserve
Objective: Allow managers to approve or reject reserve requests.

Steps:

Manager logs in.
Clicks on pending reserve approval cases.
Dashboard displays pending approvals, draft, open, and closed claims.
Reviews prepopulated fields.
Approves or rejects the reserve.
Optionally add comments.
Update reserve amount in the claim.
Display success messages and update claim status.
Send email notifications.
Implementation:

Create operator IDs and associate a portal for managers.
Define the manager dashboard.
Create report definitions for pending approvals.
Build sections for fields and buttons ('Approve reserve', 'Reject reserve').
Develop correspondence rules for email notifications.
Set case status.
5. Payment Processing: Process Claim Payment
Objective: Allow claim adjusters to process payment amounts for existing claims.

Steps:

Adjuster logs in.
Clicks on an open claim.
Reviews prepopulated fields.
Clicks 'Create payment' and selects payment type.
Enters and confirms the payment amount.
Displays validation messages for mismatches.
Optionally add comments.
Submit the payment.
Display success messages and update claim status.
Send email notifications.
Implementation:

Incorporate logic in the 'Process Claim Payment' step under 'Payment Processing'.
Build sections for fields and buttons ('Create payment', 'Submit payment').
Use data transforms and when rules for validation.
Develop correspondence rules for email notifications.
Set case status.
6. Payment Processing: Approve/Reject Claim Payment
Objective: Allow managers to approve or reject payment requests.

Steps:

Manager logs in.
Clicks on pending payment approval cases.
Dashboard displays pending approvals, draft, open, and closed claims.
Reviews prepopulated fields.
Approves or rejects the payment.
Optionally add comments.
Update reserve amount in the claim.
Display success messages and update claim status.
Send email notifications.
Implementation:

Incorporate logic in the 'Approve/Reject Claim Payment' step under 'Payment Processing'.
Build sections for fields and buttons ('Approve payment', 'Reject payment').
Develop correspondence rules for email notifications.
Set case status.
7. Claim Update: Close Claim
Objective: Allow claim adjusters to review and close existing claims.

Steps:

Adjuster logs in.
Clicks on an open claim.
Reviews and updates prepopulated fields.
Enters comments and clicks 'Close claim'.
Confirms closure in a modal pop-up.
Display success messages and update claim status.
Implementation:

Incorporate logic in the 'Close Claim' step under 'Resolution'.
Build sections for fields and buttons ('Close Claim').
Use modal dialogs for confirmation.
Set confirmation notes and case status.
